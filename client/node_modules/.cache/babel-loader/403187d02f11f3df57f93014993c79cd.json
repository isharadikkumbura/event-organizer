{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/isharadikkumburage/Development/event-organizer/client/src/components/event/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllEvents } from '../../actions/event';\nimport Spinner from '../layout/Spinner';\nimport { Text } from '../../styled/shared/Text';\nimport { Description } from '../../styled/shared/Description';\n\nconst Events = ({\n  getAllEvents,\n  event: {\n    events,\n    loading\n  }\n}) => {\n  _s();\n\n  const [event_index, setEventIndex] = useState(0);\n  useEffect(() => {\n    getAllEvents();\n  }, [getAllEvents]);\n  let optionItems = events.map(event => /*#__PURE__*/_jsxDEV(\"option\", {\n    children: event.title\n  }, event._id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: \"Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        className: \"lead\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), \" Get all events and display the selected one\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setEventIndex(e.target.options.selectedIndex),\n        children: optionItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Events, \"vU4K/dd3saUs89U5ZYvCIT+bing=\");\n\n_c = Events;\nEvents.propTypes = {\n  getAllEvents: PropTypes.func.isRequired,\n  event: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  event: state.event\n});\n\nexport default connect(mapStateToProps, {\n  getAllEvents\n})(Events);\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/isharadikkumburage/Development/event-organizer/client/src/components/event/Events.js"],"names":["React","Fragment","useEffect","useState","PropTypes","connect","getAllEvents","Spinner","Text","Description","Events","event","events","loading","event_index","setEventIndex","optionItems","map","title","_id","e","target","options","selectedIndex","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,WAAT,QAA4B,iCAA5B;;AACA,MAAMC,MAAM,GAAG,CAAC;AAAEJ,EAAAA,YAAF;AAAgBK,EAAAA,KAAK,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV;AAAvB,CAAD,KAAkD;AAAA;;AAC/D,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+BZ,QAAQ,CAAC,CAAD,CAA7C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA,MAAIU,WAAW,GAAGJ,MAAM,CAACK,GAAP,CAAYN,KAAD,iBAC3B;AAAA,cAAyBA,KAAK,CAACO;AAA/B,KAAaP,KAAK,CAACQ,GAAnB;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAIA,sBACE,QAAC,QAAD;AAAA,cACGN,OAAO,gBACN,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,QAAD;AAAA,8BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,MAAvB;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AACE,QAAA,QAAQ,EAAGO,CAAD,IAAOL,aAAa,CAACK,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,aAAlB,CADhC;AAAA,kBAGGP;AAHH;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA/BD;;GAAMN,M;;KAAAA,M;AAiCNA,MAAM,CAACc,SAAP,GAAmB;AACjBlB,EAAAA,YAAY,EAAEF,SAAS,CAACqB,IAAV,CAAeC,UADZ;AAEjBf,EAAAA,KAAK,EAAEP,SAAS,CAACuB,MAAV,CAAiBD;AAFP,CAAnB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClClB,EAAAA,KAAK,EAAEkB,KAAK,CAAClB;AADqB,CAAZ,CAAxB;;AAIA,eAAeN,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAA2CI,MAA3C,CAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllEvents } from '../../actions/event';\nimport Spinner from '../layout/Spinner';\nimport { Text } from '../../styled/shared/Text';\nimport { Description } from '../../styled/shared/Description';\nconst Events = ({ getAllEvents, event: { events, loading } }) => {\n  const [event_index, setEventIndex] = useState(0);\n\n  useEffect(() => {\n    getAllEvents();\n  }, [getAllEvents]);\n\n  let optionItems = events.map((event) => (\n    <option key={event._id}>{event.title}</option>\n  ));\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n          <Text>Events</Text>\n          <Description className='lead'>\n            <i className='fas fa-user' /> Get all events and display the\n            selected one\n          </Description>\n          <select\n            onChange={(e) => setEventIndex(e.target.options.selectedIndex)}\n          >\n            {optionItems}\n          </select>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nEvents.propTypes = {\n  getAllEvents: PropTypes.func.isRequired,\n  event: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  event: state.event,\n});\n\nexport default connect(mapStateToProps, { getAllEvents })(Events);\n"]},"metadata":{},"sourceType":"module"}