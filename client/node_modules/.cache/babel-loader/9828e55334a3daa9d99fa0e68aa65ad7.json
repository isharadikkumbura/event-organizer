{"ast":null,"code":"import { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport { LOGIN_QUERY, LOAD_USER_QUERY } from '../graphql/query';\nimport { REGISTER_USER } from '../graphql/mutation';\nimport { GraphQLClient } from 'graphql-request';\nimport { useClient, BASE_URL } from '../graphql/client'; // Load User\n\nexport const loadUser = () => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    try {\n      const res = await useClient().request(LOAD_USER_QUERY);\n      dispatch({\n        type: USER_LOADED,\n        payload: res\n      });\n    } catch (err) {\n      const errors = err.response.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.message, 'light')));\n      }\n\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }, \"5Ecbo99Oq33Mu6ql/zUSLOAdddg=\", false, function () {\n    return [useClient];\n  });\n}; // Register User\n\nexport const register = formData => async dispatch => {\n  const client = new GraphQLClient(BASE_URL);\n  const variables = {\n    firstName: formData.firstName,\n    lastName: formData.lastName,\n    email: formData.email,\n    password: formData.password,\n    phone: formData.phone\n  };\n\n  try {\n    const res = await client.request(REGISTER_USER, variables);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.message, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => {\n  var _s2 = $RefreshSig$();\n\n  return _s2(async dispatch => {\n    _s2();\n\n    const variables = {\n      email: email,\n      password: password\n    };\n\n    try {\n      const res = await useClient().request(LOGIN_QUERY, variables);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.login\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.message, 'danger')));\n      }\n\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  }, \"5Ecbo99Oq33Mu6ql/zUSLOAdddg=\", false, function () {\n    return [useClient];\n  });\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/isharadikkumburage/Development/event-organizer/client/src/actions/auth.js"],"names":["setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOGIN_QUERY","LOAD_USER_QUERY","REGISTER_USER","GraphQLClient","useClient","BASE_URL","loadUser","dispatch","res","request","type","payload","err","errors","response","forEach","error","message","register","formData","client","variables","firstName","lastName","email","password","phone","data","login","logout"],"mappings":"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","sourcesContent":["import { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from './types';\nimport { LOGIN_QUERY, LOAD_USER_QUERY } from '../graphql/query';\nimport { REGISTER_USER } from '../graphql/mutation';\nimport { GraphQLClient } from 'graphql-request';\n\nimport { useClient, BASE_URL } from '../graphql/client';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await useClient().request(LOAD_USER_QUERY);\n    dispatch({\n      type: USER_LOADED,\n      payload: res,\n    });\n  } catch (err) {\n    const errors = err.response.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.message, 'light')));\n    }\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register = (formData) => async (dispatch) => {\n  const client = new GraphQLClient(BASE_URL);\n  const variables = {\n    firstName: formData.firstName,\n    lastName: formData.lastName,\n    email: formData.email,\n    password: formData.password,\n    phone: formData.phone,\n  };\n\n  try {\n    const res = await client.request(REGISTER_USER, variables);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.message, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const variables = { email: email, password: password };\n\n  try {\n    const res = await useClient().request(LOGIN_QUERY, variables);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.login,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.message, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type: LOGOUT });\n"]},"metadata":{},"sourceType":"module"}